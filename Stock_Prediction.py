# -*- coding: utf-8 -*-
"""Git_Relience_Stock_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_k05GXrPdCQpykLBKRba5-dRlyEhwRzQ
"""

# Pandas Mmodeule for data manipulation and analysis
import pandas as pd

#To extract data from a wide range of internet Source
import pandas_datareader.data as web

# Date and Time related module
import datetime
from datetime import timedelta, datetime, date

#basic tools to compute with and manipulate arrays
import numpy as np

# Importing all the necessary models for predictions
from sklearn.linear_model import Ridge, Lasso,  BayesianRidge, ElasticNet

# Historical starting date of "RELIANCE.BO" in stock market
start = date(year=1995, month=10, day=7)

#Todays Date
end = date.today()

# Storing all the data in a pandas DataFrame
df = web.DataReader("RELIANCE.BO", 'yahoo', start, end)

# 'Adj Close' is the Target column which we will predict furthur
df['Adj Close'].plot(label='RELIANCE.BO', figsize=(16,8), grid=True)

# Creating window size of 32 so that we can predict the 33rd day stock
window_size = 32
num_samples=len(df) - window_size
indices = np.arange(num_samples).astype(np.int)[:,None] + np.arange(window_size + 1).astype(np.int)
indices

data = df['Adj Close'].values[indices]
data

#Features
X = data[:,:-1]
#Targets
y = data[:,-1]

# Splitting the DataFrame for Training and Testing.

#Training Data is stored with 80% of the toatal Data
TrainSplit = 0.8
ind_split= int(TrainSplit * num_samples)

X_train = X[:ind_split]
X_test = X[ind_split:]
y_train = y[:ind_split]
y_test = y[ind_split:]

#  Lasso Regressor
reg_1 = Lasso()
reg_1.fit(X_train, y_train)
print("Lasso Score:", reg_1.score(X_test, y_test))

# Ridge Regressor
reg_2 = Ridge()
reg_2.fit(X_train, y_train)
print("Ridge Score:", reg_2.score(X_test, y_test))

# Bayesian Ridge Regressor
reg_3 = BayesianRidge()
reg_3.fit(X_train, y_train)
print("BayesianRidge Score:", reg_3.score(X_test, y_test))

# ElasticNet Regresor
reg_4 = ElasticNet()
reg_4.fit(X_train, y_train)
print("ElasticNet Score:", reg_4.score(X_test, y_test))

#Let us predict the stock market for the Future 30 days
days = 20

data_seed = df['Adj Close'].values[-window_size:][None]

input_values = {'Lasso': data_seed, 'Ridge': data_seed, 'BayesianRidge': data_seed, 'ElasticNet': data_seed}
values = {'Lasso': [], 'Ridge': [], 'BayesianRidge': [], 'ElasticNet': []}

for i in range(days):
  values['Lasso'].append(reg_1.predict(input_values['Lasso'])[0])
  values['Ridge'].append(reg_2.predict(input_values['Ridge'])[0])
  values['BayesianRidge'].append(reg_3.predict(input_values['BayesianRidge'])[0])
  values['ElasticNet'].append(reg_4.predict(input_values['ElasticNet'])[0])

  for v in input_values:
    val = input_values[v]
    val = np.insert(val, -1, values[v][-1], axis=1)
    val = np.delete(val, 0, axis=1)
    input_values[v] = val.copy()
for v in input_values:
    values[v] = np.array(values[v])

# Plotting the Predictions of all the four Regressors in sub plots
last_date = datetime.strptime("{:%Y-%m-%d}".format(df.index[-1]),'%Y-%m-%d')
df_forecast = pd.DataFrame()
df_forecast['Lasso'] = values['Lasso']
df_forecast['Ridge'] = values['Ridge']
df_forecast['BayesianRidge'] = values['BayesianRidge']
df_forecast['ElasticNet'] = values['ElasticNet']
df_forecast.index = pd.date_range(start=last_date, periods=days)
df_forecast.plot(label='RELIANCE.BO',figsize=(16,8), title='Forecasted Adjusted Closing Price', grid=True, marker='o',linestyle=':',subplots=True)

# Plotting the Predictions of all the four Regressors in a single plot.
df_forecast.plot(label='RELIANCE.BO',figsize=(16,8), title='Forecasted Adjusted Closing Price', grid=True, marker='o',linestyle=':')

df_forecast